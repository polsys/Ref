using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Polsys.Ref.Models;

namespace Polsys.Ref.Export
{
    /// <summary>
    /// Exports the catalogue to a BibTeX (.bib) file.
    /// </summary>
    internal class BibTexExporter : CatalogueExporter
    {
        /// <summary>
        /// The default file extension used by this exporter.
        /// </summary>
        public override string FileExtension
        {
            get { return "bib"; }
        }

        /// <summary>
        /// The name of this exporter.
        /// </summary>
        public override string Name
        {
            get { return "BibTeX"; }
        }

        /// <summary>
        /// Exports the catalogue to the specified stream.
        /// </summary>
        /// <param name="stream">The stream to write the catalogue to.</param>
        /// <param name="catalogue">The catalogue to export.</param>
        /// <returns>True if successful, false otherwise.</returns>
        public override bool Export(Stream stream, Catalogue catalogue)
        {
            using (var writer = new StreamWriter(stream, Encoding.UTF8, 1024, true))
            {
                WriteHeaderComment(writer);
                writer.WriteLine();

                foreach (var entry in catalogue.Entries)
                {
                    WriteBook(writer, entry);
                    writer.WriteLine();
                }
            }

            return true;
        }

        internal void WriteBook(TextWriter writer, Book book)
        {
            if (string.IsNullOrEmpty(book.Key))
            {
                writer.WriteLine("% No key defined for \"" + book.Title + "\", skipping");
                return;
            }

            // Skip undefined fields
            var fields = new List<string>();
            if (!string.IsNullOrEmpty(book.Address))
                fields.Add("address = \"" + book.Address + "\"");
            if (!string.IsNullOrEmpty(book.Author))
                fields.Add("author = \"" + book.Author + "\"");
            if (!string.IsNullOrEmpty(book.Edition))
                fields.Add("edition = \"" + book.Edition + "\"");
            if (!string.IsNullOrEmpty(book.Editor))
                fields.Add("editor = \"" + book.Editor + "\"");
            if (!string.IsNullOrEmpty(book.Number))
                fields.Add("number = \"" + book.Number + "\"");
            if (!string.IsNullOrEmpty(book.Publisher))
                fields.Add("publisher = \"" + book.Publisher + "\"");
            if (!string.IsNullOrEmpty(book.Series))
                fields.Add("series = \"" + book.Series + "\"");
            if (!string.IsNullOrEmpty(book.Title))
                fields.Add("title = \"" + book.Title + "\"");
            if (!string.IsNullOrEmpty(book.Volume))
                fields.Add("volume = \"" + book.Volume + "\"");
            if (!string.IsNullOrEmpty(book.Year))
                fields.Add("year = \"" + book.Year + "\"");

            // Write the entry
            writer.WriteLine("@book{" + book.Key + ",");
            for (int i = 0; i < fields.Count; i++)
            {
                // Indentation included
                writer.Write("  " + fields[i]);

                // Trailing comma if not the last field
                if (i != fields.Count - 1)
                    writer.WriteLine(",");
                else
                    writer.WriteLine();
            }
            writer.WriteLine("}");
        }

        internal void WriteHeaderComment(TextWriter writer)
        {
            var versionString = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString();
            writer.WriteLine("% Auto-generated file. Any modifications will be lost if the file is regenerated.");
            writer.WriteLine("% Generated by Ref " + versionString);
            writer.WriteLine("% " + DateTime.Now.ToString());
        }
    }
}
